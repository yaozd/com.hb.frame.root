#logging.level.ROOT: DEBUG
spring:
  application:
    name: HB_EUREKA_SERVER
  #暂时调整为激活peer2-byArvin(2018-09-17-1743
  profiles:
    active: peer2
eureka:
  environment: dev

---
server:
  port: 8761
spring:
  # 指定profile=peer1
  profiles: peer1
eureka:
  instance:
    # 指定当profile=peer1时，主机名是peer1
    hostname: peer1
    #preferIpAddress: true
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
  client:
    service-url:
      #不要向注册中心注册自己
      #register-with-eureka: false
      #禁止检索服务
      #fetch-registry: false
      # 将自己注册到peer2、peer3这个Eureka上面去
      defaultZone: http://peer2:8762/eureka/
  server:
    #打开保护机制（暂时关闭保护-byArvin-2018-09-16-2220）
    #enable-self-preservation: true
    enable-self-preservation: false
    #在Eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间，单位为毫秒，默认为1000 * 60 * 5
    waitTimeInMsWhenSyncEmpty: 0
    #清理时间过期实例应该启动并运行的时间间隔，单位为毫秒，默认为60 * 1000(在内存中执行时间可以短一些)
    eviction-interval-timer-in-ms: 3000
    # 如果清理时间【eviction-interval-timer-in-ms】，则没有必要设置response-cache-auto-expiration-in-seconds的时间
    # readWriteCacheMap失效过期后从registry重新读取注册服务信息
    response-cache-auto-expiration-in-seconds: 3000
    # readCacheMap，把readWriteCacheMap的缓存更新到readCacheMap
    response-cache-update-interval-ms: 1000
    #
    use-read-only-response-cache: true
    #注：eureka服务器端数据增量更新的时间=清理时间【eviction-interval-timer-in-ms】+ 把readWriteCacheMap的缓存更新到readCacheMap【response-cache-update-interval-ms】
---
server:
  port: 8762
spring:
  profiles: peer2
eureka:
  instance:
    hostname: peer2
    #preferIpAddress: true
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
  client:
    service-url:
      defaultZone: http://peer1:8761/eureka/
  server:
    #打开保护机制（暂时关闭保护-byArvin-2018-09-16-2220）
    #enable-self-preservation: true
    enable-self-preservation: false
    #在Eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间，单位为毫秒，默认为1000 * 60 * 5
    waitTimeInMsWhenSyncEmpty: 0
    #清理时间过期实例应该启动并运行的时间间隔，单位为毫秒，默认为60 * 1000(在内存中执行时间可以短一些)
    eviction-interval-timer-in-ms: 3000
    # 如果清理时间【eviction-interval-timer-in-ms】，则没有必要设置response-cache-auto-expiration-in-seconds的时间
    # readWriteCacheMap失效过期后从registry重新读取注册服务信息
    response-cache-auto-expiration-in-seconds: 3000
    # readCacheMap，把readWriteCacheMap的缓存更新到readCacheMap
    response-cache-update-interval-ms: 1000
    #
    use-read-only-response-cache: true
    #注：eureka服务器端数据增量更新的时间=清理时间【eviction-interval-timer-in-ms】+ 把readWriteCacheMap的缓存更新到readCacheMap【response-cache-update-interval-ms】

